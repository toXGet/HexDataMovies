@page "/movies/edit/{MovieId:int}"
@using HexDataMovies.Client.Pages.Components
@using HexDataMovies.Shared.Configuration

@inject IServiceMovie movie_i
@inject IErrorMessage showMessage
@inject NavigationManager navigationManager

<h3>Editar Pelicula</h3>
 
@if (Movie == null)
{
    <div class="alert alert-info" role="alert">Cargando</div>
}
else
{
    <FormMovie Movie="Movie" OnValidSubmit="Edit"
        ActoresSeleccionados="ActoresSeleccionados"
        NotSelectedFilmGenres="NotSelectedFilmGenres"
        SelectedFilmGenres="SelectedFilmGenres"></FormMovie>
}

@code{
    [Parameter] public int MovieId {get;set;}
    @* Movie Movie = new Movie(); *@
    Movie Movie;
    private List<FilmGenre> SelectedFilmGenres = new List<FilmGenre>();
    private List<FilmGenre> NotSelectedFilmGenres = new List<FilmGenre>();
    private List<Actor> ActoresSeleccionados { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await movie_i.Get<PutMovie>($"api/movies/edit/{MovieId}");
 
        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                await showMessage.ShowErrorMessage(await httpResponse.GetBody());
            }
        }
        else
        {
            var model = httpResponse.Response;
            ActoresSeleccionados = model.Actors;
            SelectedFilmGenres = model.NotSelectedFilmGenres;
            NotSelectedFilmGenres = model.SelectedFilmGenres;
            Movie = model.Movie;
        }
    }

    private async Task Edit()
    {
        var httpResponse = await movie_i.Put("api/movies", Movie);
        if (httpResponse.Error)
        {
            await showMessage.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo($"movie/{MovieId}");
        }
    }
}